{"version":3,"sources":["Home.js","slides/Slide_1.js","slides/Slide_2.js","slides/Slide_3.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","style","width","height","backgroundColor","Component","Slide_1","genericRenderWindow","vtkGenericRenderWindow","newInstance","background","setContainer","this","refs","renderer","getRenderer","renderWindow","getRenderWindow","coneSource","vtkConeSource","mapper","vtkMapper","setInputConnection","getOutputPort","actor","vtkActor","setMapper","addActor","resetCamera","render","ref","Slide_2","Slide_3","App","className","react_router_dom","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAmBeA,mLAPP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,MAPG,CACRC,MAAM,OACNC,OAAO,OACPC,gBAAgB,aAIhB,iBAVOC,qDC0CJC,8LAnCP,IAAMC,EAAsBC,IAAuBC,YAAY,CAC3DC,WAAY,CAAC,EAAG,GAAK,KAEzBH,EAAoBI,aAAaC,KAAKC,KAAL,UAGjC,IAAMC,EAAWP,EAAoBQ,cAC/BC,EAAeT,EAAoBU,kBAEnCC,EAAaC,IAAcV,YAAY,CAAEN,OAAQ,IAEjDiB,EAASC,IAAUZ,cACzBW,EAAOE,mBAAmBJ,EAAWK,iBAErC,IAAMC,EAAQC,IAAShB,cACvBe,EAAME,UAAUN,GAEhBN,EAASa,SAASH,GAClBV,EAASc,cACTZ,EAAaa,0CASb,OACI/B,EAAAC,EAAAC,cAAA,OAAK8B,IAAI,WAAW7B,MANZ,CACRC,MAAM,OACNC,OAAO,iBA5BGE,aCaP0B,mLANP,OACIjC,EAAAC,EAAAC,cAAA,OAAKC,MARG,CACRC,MAAM,OACNC,OAAO,OACPC,gBAAgB,UAKhB,kCAZUC,aCiBP2B,mLANP,OACIlC,EAAAC,EAAAC,cAAA,OAAKC,MARG,CACRC,MAAM,OACNC,OAAO,OACPC,gBAAgB,UAKhB,qBAZUC,6BCuBP4B,MAlBf,WAIE,OACEnC,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,OACbpC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,KACErC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAO,IAAIC,UAAW1C,IACnCC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAOE,KAAO,KAAKC,UAAWjC,IAC9BR,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAOE,KAAO,KAAKC,UAAWR,IAC9BjC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAOE,KAAO,KAAKC,UAAWP,OCNlBQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAShB,OAAO/B,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d5d884e9.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\n\nclass Home extends Component{\n\n    render(){\n        const style={\n            width:\"100%\",\n            height:\"100%\",\n            backgroundColor:\"darkblue\",\n        }\n\n        return(\n            <div style={style}> Home </div>\n        )\n    }\n}\n\n\nexport default Home","import React, {Component} from 'react';\nimport vtkActor from 'vtk.js/Sources/Rendering/Core/Actor';\nimport vtkCalculator from 'vtk.js/Sources/Filters/General/Calculator';\nimport vtkConeSource from 'vtk.js/Sources/Filters/Sources/ConeSource';\nimport vtkGenericRenderWindow from 'vtk.js/Sources/Rendering/Misc/GenericRenderWindow';\nimport vtkMapper from 'vtk.js/Sources/Rendering/Core/Mapper';\n\nclass Slide_1 extends Component{\n\n    componentDidMount(){\n        const genericRenderWindow = vtkGenericRenderWindow.newInstance({\n            background: [0, 0.5, 0],\n        });\n        genericRenderWindow.setContainer(this.refs[\"renderer\"]);\n\n\n        const renderer = genericRenderWindow.getRenderer();\n        const renderWindow = genericRenderWindow.getRenderWindow();\n\n        const coneSource = vtkConeSource.newInstance({ height: 1.0 });\n\n        const mapper = vtkMapper.newInstance();\n        mapper.setInputConnection(coneSource.getOutputPort());\n\n        const actor = vtkActor.newInstance();\n        actor.setMapper(mapper);\n\n        renderer.addActor(actor);\n        renderer.resetCamera();        \n        renderWindow.render();        \n    }\n\n    render(){\n        const style={\n            width:\"100%\",\n            height:\"100%\",            \n        }\n\n        return(\n            <div ref=\"renderer\" style={style}/>\n        )\n    }\n}\n\n\nexport default Slide_1","import React, {Component} from 'react'\n\n\nclass Slide_2 extends Component{\n\n    render(){\n\n        const style={\n            width:\"100%\",\n            height:\"100%\",\n            backgroundColor:\"green\",\n        }\n\n\n        return(\n            <div style={style}> mandible_maxila_tooth </div>\n        )\n    }\n};\n\nexport default Slide_2","import React, {Component} from 'react'\n\n\nclass Slide_3 extends Component{\n\n    render(){\n\n        const style={\n            width:\"100%\",\n            height:\"100%\",\n            backgroundColor:\"green\",\n        }\n\n\n        return(\n            <div style={style}> Depthmap </div>\n        )\n    }\n};\n\nexport default Slide_3","import React from 'react';\nimport './App.css';\nimport Home from './Home';\nimport Slide_1 from './slides/Slide_1';\nimport Slide_2 from './slides/Slide_2';\nimport Slide_3 from './slides/Slide_3';\nimport {HashRouter as Router, Route} from 'react-router-dom';\n\nfunction App() {\n\n  \n\n  return (\n    <div className=\"App\">      \n      <Router>\n        <Route exact path = \"/\" component={Home}/>\n        <Route path = \"/1\" component={Slide_1}/>\n        <Route path = \"/2\" component={Slide_2}/>\n        <Route path = \"/3\" component={Slide_3}/>\n      </Router>\n    </div>\n    \n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}